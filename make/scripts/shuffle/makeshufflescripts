#!/bin/bash
#
# Copyright (c) 2009, 2012, Oracle and/or its affiliates. All rights reserved.
# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
#
# This code is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License version 2 only, as
# published by the Free Software Foundation.
#
# This code is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
# version 2 for more details (a copy is included in the LICENSE file that
# accompanied this code).
#
# You should have received a copy of the GNU General Public License version
# 2 along with this work; if not, write to the Free Software Foundation,
# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
#
# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
# or visit www.oracle.com if you need additional information or have any
# questions.
#

export LC_ALL=C

MS=$(cd "$(dirname "$0")" && pwd) 

if [ "$1" = "--list-only" ]; then
  RSYNC="rsync --list-only"
  NOECHO=1
else 
  RSYNC="rsync -q"
fi

DATE=`date`
TMP=/tmp/shuffle.$$
mkdir $TMP
TOP=`pwd`

if [ ! -d build/*/moduleinfo ]; then
  echo Do a full build before running this script.
  exit 1
fi
base=`echo build/*/moduleinfo`
if [ ! -d $base/shuffledata ]; then
  mkdir $base/shuffledata
  if [ ! $base/shuffledata ]; then
    echo could not create $base/shuffledata. 
    exit 1
  fi
fi
PLAT=`ls $TOP/build`

JAVA=$TOP/build/$PLAT/jdk-module-image/bin/java
JAVAC=$TOP/build/$PLAT/jdk-module-image/bin/javac

# shuffle meta-data output dir produced by this script

BASE=$TOP/$base
SDIR=$BASE/shuffledata

# Directories we search for sources

platforms="share solaris windows macosx closed/share closed/solaris closed/windows closed/macosx" 

# list of repos and the modules associated with each (there can be overlap)

jdk_modules="jdk.auth jdk.base jdk.compat jdk.compiler jdk.corba jdk.cosnaming \
  jdk.crypto jdk.deploy jdk.desktop jdk.devtools jdk.httpserver jdk.instrument \
  jdk.jaxp jdk.jdbc jdk.jdbc.rowset jdk.jndi \
  jdk.jx.annotations jdk.kerberos jdk.logging jdk.management \
  jdk.management.iiop jdk.prefs jdk.rmi jdk.scripting jdk.sctp \
  jdk.security.acl jdk.smartcardio jdk.snmp jdk.sunec jdk.sunpkcs11 \
  jdk.tls jdk.tools.base jdk.tools jdk.tools.jre jdk.ucrypto jdk.xmldsig \
  jdk.zipfs sun.charsets sun.localedata sun.resources"


langtools_modules="jdk.compiler jdk.devtools jdk.jta jdk.jx.annotations"

corba_modules="jdk.corba jdk.tools jdk.jta"

jaxws_modules="jdk.jaxws jdk.tools.jaxws"

jaxp_modules=jdk.jaxp

allmodules="$jdk_modules $langtools_modules $corba_modules $jaxws_modules"

# File that maps unshuffled directory names to the shuffled names

cd $base/classlist

#
# listfiles dirname output-prefix targetfile
#
listfiles() {
  list=`ls $1`
  for i in $list; do
    echo $2/$i >> $3
  done
}

getFirstLabel() {
  echo $1 | sed -e 's?^\([^/]*\)/.*$?\1?'
}

getRestOfPath() {
  echo $1 | sed -e 's?^[^/]*/\(.*\)$?\1?'
}

# closed/foo -> foo
# foo -> foo

getOpPlatform() {
  if [ "${1:0:7}" = "closed/" ]; then
    echo "${1:7}"
  else
    echo $1
  fi
}

# warn message 

warn() {
  echo $1 
}

# $1 = name of file
# Creates the file if it doesn't exist and adds a standard
# header to it.

createIfNotExisting() {
  if [ ! -f $1 ]; then
    cat > $1 << C_EOF
#
# Generated by makeshufflescript at $DATE
#
# check required environment variables set

if [ "\$ROOT" = "" ]; then
  echo 'Please set \$ROOT to point to top level directory of forest'
  exit 1
fi
if [ "\$SCRIPT_DIR" = "" ]; then
  echo 'Please set \$SCRIPT_DIR to point to directory containing the un/shuffle scripts'
  exit 1
fi
C_EOF

  fi
}
  
# check for name in exclude file

isNotExcluded() {
  grep $1 $2 > /dev/null
  if [ $? = 0 ]; then
    return 1;
  fi
  return 0
}

#
# $1 = directory to check
# $2 = file of names that are also to be ignored
# check for existence of at least one regular file in the given directory
# return 0 if yes, 1 if no files (sub-dirs don't count)
#
checkForFiles() {
  files=`ls -1 $1 `
  if [ "$files" = "" ]; then
    return 1
  fi
  for i in $files; do
    if [ -f $1/$i ]; then 
      isNotExcluded $1/$i $2
      if [ $? = 0 ]; then
        return 0
      fi
    fi
  done
  return 1
}

create_dirs() {
  echo "CREATING dir files"
  echo ""
  cd $BASE/classlist
  > $TMP/all.native
  for module in $allmodules; do
    echo processing $module
    if [ ! -d $SDIR/$module ]; then
      mkdir -p $SDIR/$module
    fi

    # file containing list of source directories (package names)
    dirs=$SDIR/${module}/dirs

    rm -f $dirs
    rm -f $dirs.native

    > $TMP/classlist

    # these are the moduleinfo directories from the other platforms
    # which have to be combined manually

    if [ -f $MS/moduleinfo.others/classlist/${module}.classlist ]; then
      cat $MS/moduleinfo.others/classlist/${module}.classlist >> $TMP/classlist
    fi

    # these are manually created (ie. not from other platform build)
    # so be careful not to overwrite them with the output from a platform
    # build. Also, make sure these files are only supplied for module
    # native code that is NOT built on the current platform.

    if [ -f $MS/moduleinfo.others/shuffledata/dirs.native ]; then
      cp $MS/moduleinfo.others/shuffledata/dirs.native $dirs.native
    fi

    if [ -f ${module}.classlist ]; then
      cat ${module}.classlist >> $TMP/classlist
    fi
    cat $TMP/classlist \
          | while read name; do dirname $name; done | sort | uniq > $dirs

    if [ ! -f $dirs.native ]; then
      > $dirs.native
    fi

    #
    # check each class in each module for native code. If class has native
    # methods then add the package name of the class to dirs.native
    #
    > $TMP/nats.2
    > $TMP/nats.3
    > $TMP/nats.4
  
    if [ -f ${module}.classlist ]; then
      if [ ! -f $MS/CheckNative.class ]; then
        (cd $MS; ${JAVAC} CheckNative.java)
      fi
      ${JAVA} -cp $MS CheckNative ${module}.classlist > $TMP/nats.1

      cat $TMP/nats.1 | while read name; do
        echo `dirname $name` >> $TMP/nats.2
      done
      sort $TMP/nats.2 | uniq >> $dirs.native
      cat $dirs.native >> $TMP/all.native
    fi
  done
  sort $TMP/all.native | uniq > $TMP/foo.1
  mv $TMP/foo.1 $TMP/all.native

  cd $TOP/jdk/src

  echo "Looking for native sub-directories"
  
  for module in $allmodules; do
    dirs=$SDIR/${module}/dirs
    echo $module

    # finally look for sub-directories in any of the directories acquired above
    # but exclude directories already accounted for in all.native

    > $TMP/nats.5

    cat $dirs.native | while read dir; do
      for platform in $platforms; do
       (
        if [ -d  $TOP/jdk/src/$platform/native/$dir ]; then
          cd $TOP/jdk/src/$platform/native
          find $dir -type d >> $TMP/nats.5
        fi
       ) 
      done

      # Add the entries in $module.excludes (if it exists) to all.native
      # so that these are excluded also

      if [ -f $MS/$module.excludes ]; then
        cat $MS/$module.excludes $TMP/all.native | uniq > $TMP/allnat
      else
        cp $TMP/all.native $TMP/allnat
      fi


      cat $TMP/nats.5 |sort |uniq > $TMP/nats.6
      # find the duplicates
      cat $TMP/nats.6 $TMP/allnat | sort | uniq -d > $TMP/nats.7
      # remove the duplicates, and add the remainder to dirs.native
      cat $TMP/nats.6 $TMP/nats.7 | sort | uniq -u >> $dirs.native

      # one last sort/uniq 
      sort $dirs.native | uniq > $TMP/foo.2 
      mv $TMP/foo.2 $dirs.native

    done
  done
}

# $1 = name of repo
# $2 = the appropriate source root for the repo above
# $3+ = either $jdk_modules or $langtools_modules

process_repository() {
  echo ""
  echo DOING REPO: $1
  repo=$1
  echo ""
  shift
  SRCROOT=$TOP/$1
  RELROOT=$1
  shift

  for module in $*; do
    echo processing $module
    
    shuffle_script=$SDIR/$module/shuffle.sh
    dirs=$SDIR/${module}/dirs
    unshuffle_script=$SDIR/$module/unshuffle.sh
    excludes=$SDIR/$module/excludes
    resourcefile=$BASE/classlist/${module}.resources

    for platform in $platforms; do
      op_platform=`getOpPlatform $platform`
      # Sigh! Following loop needed for jaxws (reduces to classes only else)
      for classes in classes jaf_classes jaxws_classes; do
        # jaxp layout has changed - ugly hack required
        if [ $repo = "jaxp" ]; then
          classes=''
          platform=''
          op_platform='share'
        fi
        if [ -d $SRCROOT/$platform/$classes ]; then
          cd $SRCROOT/$platform/$classes
          # CLASSES
          cat $dirs | while read package; do
            pkgdir=$package
            if [ -d $pkgdir ]; then 
    
              createIfNotExisting $shuffle_script "shuffling" $module
    
              checkForFiles $pkgdir $excludes 
              if [ $? = 1 ]; then
                # nothing to see here
                continue;
              fi
    
              printf '# 1\n' >> $shuffle_script
              printf '\nmkdir -p ${ROOT}/%s/newsrc/%s\n' \
                $repo $op_platform/mclasses/$module/$package >> $shuffle_script
    
	      printf '%s --exclude-from=${SCRIPT_DIR}/%s -R \
	        ${ROOT}/%s/./%s/*  \
	        ${ROOT}/%s/newsrc/%s/\n' \
                "${RSYNC}" \
	        $module/excludes \
	        $RELROOT/$platform/$classes $package $repo \
	        $op_platform/mclasses/$module >> $shuffle_script
      
              createIfNotExisting $unshuffle_script "unshuffling" $module
    
	      printf '%s --exclude-from=${SCRIPT_DIR}/%s -R \
	        ${ROOT}/%s/newsrc/%s/./%s/*  \
	        ${ROOT}/%s/\n' \
                "${RSYNC}" \
	        $module/excludes $repo \
	        $op_platform/mclasses/$module $package \
	        $RELROOT/$platform/$classes >> $unshuffle_script
      
            fi
          done # cat
        fi
        if [ $repo = "jaxp" ]; then
          break 2; # out of classes and platforms loop
        fi
      done # classes

      # NATIVE
      # ASSUMING: native code always associated with some Java source package
      if [ -d $SRCROOT/$platform/native ]; then
        cd $SRCROOT/$platform/native
        cat $dirs.native | while read package; do
          pkgdir=$package
          if [ -d $pkgdir ]; then 
      
            createIfNotExisting $shuffle_script "shuffling" $module
    
            madedir=0
              checkForFiles $pkgdir $excludes
              if [ $? = 1 ]; then
                # nothing to see here
                continue;
              fi
 
              if [ $madedir = 0 ]; then
                printf '# 2\n' >> $shuffle_script
                printf '\nmkdir -p ${ROOT}/%s/newsrc/%s\n' \
                  $repo \
                  $op_platform/native/$module/$package >> $shuffle_script
              fi
              madedir=1
  
	      printf '%s --exclude-from=${SCRIPT_DIR}/%s -R \
	        ${ROOT}/%s/./%s/* \
	        ${ROOT}/%s/newsrc/%s/\n' \
                "${RSYNC}" \
	        $module/excludes \
	        $RELROOT/$platform/native $package $repo \
	        $op_platform/native/$module >> $shuffle_script
  
              createIfNotExisting $unshuffle_script "unshuffling" $module
   
	      printf '%s --exclude-from=${SCRIPT_DIR}/%s -R \
	        ${ROOT}/%s/newsrc/%s/./%s/* \
	        ${ROOT}/%s/\n' \
                "${RSYNC}" \
	        $module/excludes $repo \
	        $op_platform/native/$module $package \
	        $RELROOT/$platform/native >> $unshuffle_script
          fi
        done # cat
      fi
    done # platforms
    #
    # Now take care of the resources (ie. all "other" files)
    #
    if [ -f $resourcefile ]; then
      cat $resourcefile | while read name; do
        for platform in $platforms; do
          op_platform=`getOpPlatform $platform`
          if [ -f $SRCROOT/$platform/classes/$name ]; then
              directory=`dirname $name`
              printf '# 3\n' >> $shuffle_script
              printf 'mkdir -p ${ROOT}/%s/newsrc/%s/mclasses/%s/%s\n' \
                $repo $op_platform $module $directory >> $shuffle_script
                
	      printf '%s ${ROOT}/%s/classes/./%s  \
	        ${ROOT}/%s/newsrc/%s/mclasses/%s/%s \n' \
                "${RSYNC}" \
	        $RELROOT/$platform $name $repo $op_platform \
                $module $name >> $shuffle_script
  
	      printf '%s ${ROOT}/%s/newsrc/%s/mclasses/%s/%s \
                ${ROOT}/%s/classes/./%s \n\n' \
                "${RSYNC}" $repo \
	        $op_platform $module $name \
                $RELROOT/$platform  $name>> $unshuffle_script
          fi
          if [ -f $SRCROOT/$platform/native/$name ]; then
              directory=`dirname $name`
              printf '# 4\n' >> $shuffle_script
              printf 'mkdir -p ${ROOT}/%s/newsrc/%s/mclasses/%s/%s\n'  \
                $repo $op_platform $module $directory >> $shuffle_script

	      printf '%s ${ROOT}/%s/native/./%s  \
	        ${ROOT}/%s/newsrc/%s/native/%s/%s \n' \
                "${RSYNC}" $RELROOT/$platform $op_platform \
                $repo $module $name >> $shuffle_script
  
	      printf '%s ${ROOT}/%s/newsrc/%s/native/%s \
                ${ROOT}/%s/native/./%s \n\n' \
                "${RSYNC}" $repo \
	        $op_platform $name $RELROOT/$platform  >> $unshuffle_script
          fi
        done # for
      done # cat
    fi
    # Add miscellaneous resources that are not currently identified by jigsaw build
    # Each module (may have)/has a ${module}.includes file which contains a list
    # of grep patterns to match filenames in one directory only. Care must be taken
    # to ensure that the pattern is an exclusive match, ie. doesn't overlap with files
    # already accounted for.

    # to avoid unintended pattern matches
    mkdir -p $TMP/empty
    cd $TMP/empty 

    if [ -f $MS/$module.includes ]; then
      for entry in `cat $MS/$module.includes| egrep -v '^#' `; do

        dir=`dirname "$entry"`
        pattern=`basename "$entry"`
        for platform in $platforms; do
          op_platform=`getOpPlatform $platform`
          for classes in classes jaf_classes jaxws_classes; do
            if [ -d $SRCROOT/$platform/$classes/$dir ]; then
              printf '# 5\n' >> $shuffle_script
              printf 'mkdir -p ${ROOT}/%s/newsrc/%s/mclasses/%s/%s\n' \
                $repo $op_platform $module $dir >> $shuffle_script

	      printf '%s ${ROOT}/%s/%s/./%s  \
	        ${ROOT}/%s/newsrc/%s/mclasses/%s/%s \n' \
                "${RSYNC}" $RELROOT/$platform $classes $dir/$pattern \
                $repo $op_platform $module $dir >> $shuffle_script
 
	      printf '%s ${ROOT}/%s/newsrc/%s/mclasses/%s/%s \
                ${ROOT}/%s/%s/./%s \n\n' \
                "${RSYNC}" $repo \
	        $op_platform $module $dir/$pattern \
                $RELROOT/$platform $classes $dir>> $unshuffle_script
            fi
          done # for classes
          if [ -d $SRCROOT/$platform/native/$dir ]; then
            printf '# 6\n' >> $shuffle_script
            printf 'mkdir -p ${ROOT}/%s/newsrc/%s/native/%s/%s\n' \
              $repo $op_platform $module $dir >> $shuffle_script

	    printf '%s ${ROOT}/%s/native/./%s  \
	      ${ROOT}/%s/newsrc/%s/native/%s/%s \n' \
              "${RSYNC}" $RELROOT/$platform $dir/$pattern \
              $repo $op_platform \
              $module $dir >> $shuffle_script
 
	    printf '%s ${ROOT}/%s/newsrc/%s/native/%s/%s \
              ${ROOT}/%s/native/./%s \n\n' \
              "${RSYNC}" $repo \
	      $op_platform $module $dir/$pattern \
              $RELROOT/$platform  $dir>> $unshuffle_script
          fi
        done # for
      done # cat
    fi
  done # module
}

# Delete any old un/shuffle scripts
rm -f $SDIR/*/*.sh

create_dirs

# check for overlapping packages now
# we do this by comparing all of the list files with each other
# and looking for overlaps

cd $SDIR

echo "================================================================="
echo ""
echo "Checking for overlapping modules"
echo ""
for i in $allmodules; do
  if [ ! -d $SDIR/$i ]; then
    continue;
  fi
  exclfile=$SDIR/$i/excludes
  > $exclfile

  for j in $allmodules; do
    if [ $i != $j ]; then
      cat $i/dirs $j/dirs | sort | uniq -d > $TMP/$i.$j
      if [ -s $TMP/$i.$j ]; then
        warn "overlap between $i and $j" 
        # create list of files in $j belonging to $k package. 
	# These will be excluded from $i's copy of $k
        for k in `cat $TMP/$i.$j`; do
	  egrep "${k}.*class$" $BASE/classlist/$j.classlist \
                                                     > $TMP/classes.$i.excl
          # now convert this to a list of sourcefile names
          # There could be additional names here (eg. inner classes) which
          # don't have corresponding .java names, but that's ok.
          # We're only using this data as an exclude list.
          cat $TMP/classes.$i.excl | sed -e 's/\.class$//' >> $exclfile
	done
      fi
    fi
  done
done

echo "================================================================="
echo ""
echo "Generating scripts"
echo ""

process_repository jdk jdk/src $jdk_modules 
process_repository langtools langtools/src $langtools_modules
process_repository corba corba/src $corba_modules
process_repository jaxws jaxws/src $jaxws_modules
process_repository jaxp jaxp/src $jaxp_modules

# copy manually generated zipfs scripts

cp $MS/zipfs.shuffle  $SDIR/jdk.zipfs/shuffle.sh
cp $MS/zipfs.unshuffle  $SDIR/jdk.zipfs/unshuffle.sh

echo "================================================================="
echo ""

#
# Now copy the non standard mappings from non-standard.includes
#

echo "Non standard mappings"

cat $MS/non-standard.includes | grep -v ^# | while read module source target; do
  shuffle_script=$SDIR/$module/shuffle.sh
  mkdir -p $SDIR/$module
  unshuffle_script=$SDIR/$module/unshuffle.sh
  targdir=`dirname $target`
  srcdir=`dirname $source`
  
  printf '# 7\n' >> $shuffle_script
  printf 'mkdir -p ${ROOT}/%s\n' $targdir >> $shuffle_script
  printf '%s ${ROOT}/%s ${ROOT}/%s\n' "${RSYNC}" $source $targdir >> $shuffle_script
  printf '%s ${ROOT}/%s ${ROOT}/%s\n' "${RSYNC}" $target $srcdir >> $unshuffle_script
done
cd $SDIR

for module in $allmodules; do
  if [ ! -f $module/shuffle.sh ]; then
    echo Warning. No output for $module
  fi
done

rm -rf $TOP/shufflescripts $TOP/scripts.zip
mkdir $TOP/shufflescripts
cd $SDIR
find . -name '*.sh' -o -name excludes | zip -@ $TOP/scripts.zip
cd $TOP/shufflescripts
unzip ../scripts.zip
cp $MS/*shuffle.sh .

rm -rf $TMP
